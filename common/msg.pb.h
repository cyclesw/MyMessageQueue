// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_msg_2eproto;
namespace rabbitMQ {
class BasicProperties;
struct BasicPropertiesDefaultTypeInternal;
extern BasicPropertiesDefaultTypeInternal _BasicProperties_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Message_Payload;
struct Message_PayloadDefaultTypeInternal;
extern Message_PayloadDefaultTypeInternal _Message_Payload_default_instance_;
}  // namespace rabbitMQ
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace rabbitMQ {
enum ExchangeType : int {
  UNKOWNTYPE = 0,
  DIRECT = 1,
  FANOUT = 2,
  TOPIC = 3,
  ExchangeType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ExchangeType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ExchangeType_IsValid(int value);
extern const uint32_t ExchangeType_internal_data_[];
constexpr ExchangeType ExchangeType_MIN = static_cast<ExchangeType>(0);
constexpr ExchangeType ExchangeType_MAX = static_cast<ExchangeType>(3);
constexpr int ExchangeType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
ExchangeType_descriptor();
template <typename T>
const std::string& ExchangeType_Name(T value) {
  static_assert(std::is_same<T, ExchangeType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ExchangeType_Name().");
  return ExchangeType_Name(static_cast<ExchangeType>(value));
}
template <>
inline const std::string& ExchangeType_Name(ExchangeType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ExchangeType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ExchangeType_Parse(absl::string_view name, ExchangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExchangeType>(
      ExchangeType_descriptor(), name, value);
}
enum DeliveryMode : int {
  UNKOWNMODE = 0,
  UNDURABLE = 1,
  DURABLE = 2,
  DeliveryMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DeliveryMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DeliveryMode_IsValid(int value);
extern const uint32_t DeliveryMode_internal_data_[];
constexpr DeliveryMode DeliveryMode_MIN = static_cast<DeliveryMode>(0);
constexpr DeliveryMode DeliveryMode_MAX = static_cast<DeliveryMode>(2);
constexpr int DeliveryMode_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
DeliveryMode_descriptor();
template <typename T>
const std::string& DeliveryMode_Name(T value) {
  static_assert(std::is_same<T, DeliveryMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DeliveryMode_Name().");
  return DeliveryMode_Name(static_cast<DeliveryMode>(value));
}
template <>
inline const std::string& DeliveryMode_Name(DeliveryMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DeliveryMode_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool DeliveryMode_Parse(absl::string_view name, DeliveryMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeliveryMode>(
      DeliveryMode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class BasicProperties final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rabbitMQ.BasicProperties) */ {
 public:
  inline BasicProperties() : BasicProperties(nullptr) {}
  ~BasicProperties() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BasicProperties(::google::protobuf::internal::ConstantInitialized);

  inline BasicProperties(const BasicProperties& from)
      : BasicProperties(nullptr, from) {}
  BasicProperties(BasicProperties&& from) noexcept
    : BasicProperties() {
    *this = ::std::move(from);
  }

  inline BasicProperties& operator=(const BasicProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicProperties& operator=(BasicProperties&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BasicProperties& default_instance() {
    return *internal_default_instance();
  }
  static inline const BasicProperties* internal_default_instance() {
    return reinterpret_cast<const BasicProperties*>(
               &_BasicProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BasicProperties& a, BasicProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(BasicProperties* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BasicProperties* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BasicProperties* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BasicProperties>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BasicProperties& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BasicProperties& from) {
    BasicProperties::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BasicProperties* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rabbitMQ.BasicProperties";
  }
  protected:
  explicit BasicProperties(::google::protobuf::Arena* arena);
  BasicProperties(::google::protobuf::Arena* arena, const BasicProperties& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRoutingKeyFieldNumber = 3,
    kDeliveryModeFieldNumber = 2,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string routing_key = 3;
  void clear_routing_key() ;
  const std::string& routing_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_routing_key(Arg_&& arg, Args_... args);
  std::string* mutable_routing_key();
  PROTOBUF_NODISCARD std::string* release_routing_key();
  void set_allocated_routing_key(std::string* value);

  private:
  const std::string& _internal_routing_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_routing_key(
      const std::string& value);
  std::string* _internal_mutable_routing_key();

  public:
  // .rabbitMQ.DeliveryMode delivery_mode = 2;
  void clear_delivery_mode() ;
  ::rabbitMQ::DeliveryMode delivery_mode() const;
  void set_delivery_mode(::rabbitMQ::DeliveryMode value);

  private:
  ::rabbitMQ::DeliveryMode _internal_delivery_mode() const;
  void _internal_set_delivery_mode(::rabbitMQ::DeliveryMode value);

  public:
  // @@protoc_insertion_point(class_scope:rabbitMQ.BasicProperties)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr routing_key_;
    int delivery_mode_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};// -------------------------------------------------------------------

class Message_Payload final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rabbitMQ.Message.Payload) */ {
 public:
  inline Message_Payload() : Message_Payload(nullptr) {}
  ~Message_Payload() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Message_Payload(::google::protobuf::internal::ConstantInitialized);

  inline Message_Payload(const Message_Payload& from)
      : Message_Payload(nullptr, from) {}
  Message_Payload(Message_Payload&& from) noexcept
    : Message_Payload() {
    *this = ::std::move(from);
  }

  inline Message_Payload& operator=(const Message_Payload& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Payload& operator=(Message_Payload&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_Payload& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_Payload* internal_default_instance() {
    return reinterpret_cast<const Message_Payload*>(
               &_Message_Payload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Message_Payload& a, Message_Payload& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Payload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Payload* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_Payload* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_Payload>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message_Payload& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Message_Payload& from) {
    Message_Payload::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message_Payload* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rabbitMQ.Message.Payload";
  }
  protected:
  explicit Message_Payload(::google::protobuf::Arena* arena);
  Message_Payload(::google::protobuf::Arena* arena, const Message_Payload& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 2,
    kValidFieldNumber = 3,
    kPropertiesFieldNumber = 1,
  };
  // string body = 2;
  void clear_body() ;
  const std::string& body() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_body(Arg_&& arg, Args_... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* value);

  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(
      const std::string& value);
  std::string* _internal_mutable_body();

  public:
  // string valid = 3;
  void clear_valid() ;
  const std::string& valid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_valid(Arg_&& arg, Args_... args);
  std::string* mutable_valid();
  PROTOBUF_NODISCARD std::string* release_valid();
  void set_allocated_valid(std::string* value);

  private:
  const std::string& _internal_valid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_valid(
      const std::string& value);
  std::string* _internal_mutable_valid();

  public:
  // .rabbitMQ.BasicProperties properties = 1;
  bool has_properties() const;
  void clear_properties() ;
  const ::rabbitMQ::BasicProperties& properties() const;
  PROTOBUF_NODISCARD ::rabbitMQ::BasicProperties* release_properties();
  ::rabbitMQ::BasicProperties* mutable_properties();
  void set_allocated_properties(::rabbitMQ::BasicProperties* value);
  void unsafe_arena_set_allocated_properties(::rabbitMQ::BasicProperties* value);
  ::rabbitMQ::BasicProperties* unsafe_arena_release_properties();

  private:
  const ::rabbitMQ::BasicProperties& _internal_properties() const;
  ::rabbitMQ::BasicProperties* _internal_mutable_properties();

  public:
  // @@protoc_insertion_point(class_scope:rabbitMQ.Message.Payload)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      42, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr body_;
    ::google::protobuf::internal::ArenaStringPtr valid_;
    ::rabbitMQ::BasicProperties* properties_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};// -------------------------------------------------------------------

class Message final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rabbitMQ.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Message(::google::protobuf::internal::ConstantInitialized);

  inline Message(const Message& from)
      : Message(nullptr, from) {}
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Message& from) {
    Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "rabbitMQ.Message";
  }
  protected:
  explicit Message(::google::protobuf::Arena* arena);
  Message(::google::protobuf::Arena* arena, const Message& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Payload = Message_Payload;

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kLengthFieldNumber = 3,
  };
  // .rabbitMQ.Message.Payload payload = 1;
  bool has_payload() const;
  void clear_payload() ;
  const ::rabbitMQ::Message_Payload& payload() const;
  PROTOBUF_NODISCARD ::rabbitMQ::Message_Payload* release_payload();
  ::rabbitMQ::Message_Payload* mutable_payload();
  void set_allocated_payload(::rabbitMQ::Message_Payload* value);
  void unsafe_arena_set_allocated_payload(::rabbitMQ::Message_Payload* value);
  ::rabbitMQ::Message_Payload* unsafe_arena_release_payload();

  private:
  const ::rabbitMQ::Message_Payload& _internal_payload() const;
  ::rabbitMQ::Message_Payload* _internal_mutable_payload();

  public:
  // uint32 offset = 2;
  void clear_offset() ;
  ::uint32_t offset() const;
  void set_offset(::uint32_t value);

  private:
  ::uint32_t _internal_offset() const;
  void _internal_set_offset(::uint32_t value);

  public:
  // uint32 length = 3;
  void clear_length() ;
  ::uint32_t length() const;
  void set_length(::uint32_t value);

  private:
  ::uint32_t _internal_length() const;
  void _internal_set_length(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:rabbitMQ.Message)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::rabbitMQ::Message_Payload* payload_;
    ::uint32_t offset_;
    ::uint32_t length_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BasicProperties

// string id = 1;
inline void BasicProperties::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& BasicProperties::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rabbitMQ.BasicProperties.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BasicProperties::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rabbitMQ.BasicProperties.id)
}
inline std::string* BasicProperties::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:rabbitMQ.BasicProperties.id)
  return _s;
}
inline const std::string& BasicProperties::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void BasicProperties::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* BasicProperties::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* BasicProperties::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rabbitMQ.BasicProperties.id)
  return _impl_.id_.Release();
}
inline void BasicProperties::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rabbitMQ.BasicProperties.id)
}

// .rabbitMQ.DeliveryMode delivery_mode = 2;
inline void BasicProperties::clear_delivery_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.delivery_mode_ = 0;
}
inline ::rabbitMQ::DeliveryMode BasicProperties::delivery_mode() const {
  // @@protoc_insertion_point(field_get:rabbitMQ.BasicProperties.delivery_mode)
  return _internal_delivery_mode();
}
inline void BasicProperties::set_delivery_mode(::rabbitMQ::DeliveryMode value) {
  _internal_set_delivery_mode(value);
  // @@protoc_insertion_point(field_set:rabbitMQ.BasicProperties.delivery_mode)
}
inline ::rabbitMQ::DeliveryMode BasicProperties::_internal_delivery_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::rabbitMQ::DeliveryMode>(_impl_.delivery_mode_);
}
inline void BasicProperties::_internal_set_delivery_mode(::rabbitMQ::DeliveryMode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.delivery_mode_ = value;
}

// string routing_key = 3;
inline void BasicProperties::clear_routing_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.routing_key_.ClearToEmpty();
}
inline const std::string& BasicProperties::routing_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rabbitMQ.BasicProperties.routing_key)
  return _internal_routing_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BasicProperties::set_routing_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.routing_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rabbitMQ.BasicProperties.routing_key)
}
inline std::string* BasicProperties::mutable_routing_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_routing_key();
  // @@protoc_insertion_point(field_mutable:rabbitMQ.BasicProperties.routing_key)
  return _s;
}
inline const std::string& BasicProperties::_internal_routing_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.routing_key_.Get();
}
inline void BasicProperties::_internal_set_routing_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.routing_key_.Set(value, GetArena());
}
inline std::string* BasicProperties::_internal_mutable_routing_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.routing_key_.Mutable( GetArena());
}
inline std::string* BasicProperties::release_routing_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rabbitMQ.BasicProperties.routing_key)
  return _impl_.routing_key_.Release();
}
inline void BasicProperties::set_allocated_routing_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.routing_key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.routing_key_.IsDefault()) {
          _impl_.routing_key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rabbitMQ.BasicProperties.routing_key)
}

// -------------------------------------------------------------------

// Message_Payload

// .rabbitMQ.BasicProperties properties = 1;
inline bool Message_Payload::has_properties() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.properties_ != nullptr);
  return value;
}
inline void Message_Payload::clear_properties() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.properties_ != nullptr) _impl_.properties_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::rabbitMQ::BasicProperties& Message_Payload::_internal_properties() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::rabbitMQ::BasicProperties* p = _impl_.properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::rabbitMQ::BasicProperties&>(::rabbitMQ::_BasicProperties_default_instance_);
}
inline const ::rabbitMQ::BasicProperties& Message_Payload::properties() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rabbitMQ.Message.Payload.properties)
  return _internal_properties();
}
inline void Message_Payload::unsafe_arena_set_allocated_properties(::rabbitMQ::BasicProperties* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.properties_);
  }
  _impl_.properties_ = reinterpret_cast<::rabbitMQ::BasicProperties*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rabbitMQ.Message.Payload.properties)
}
inline ::rabbitMQ::BasicProperties* Message_Payload::release_properties() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::rabbitMQ::BasicProperties* released = _impl_.properties_;
  _impl_.properties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::rabbitMQ::BasicProperties* Message_Payload::unsafe_arena_release_properties() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rabbitMQ.Message.Payload.properties)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::rabbitMQ::BasicProperties* temp = _impl_.properties_;
  _impl_.properties_ = nullptr;
  return temp;
}
inline ::rabbitMQ::BasicProperties* Message_Payload::_internal_mutable_properties() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::rabbitMQ::BasicProperties>(GetArena());
    _impl_.properties_ = reinterpret_cast<::rabbitMQ::BasicProperties*>(p);
  }
  return _impl_.properties_;
}
inline ::rabbitMQ::BasicProperties* Message_Payload::mutable_properties() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::rabbitMQ::BasicProperties* _msg = _internal_mutable_properties();
  // @@protoc_insertion_point(field_mutable:rabbitMQ.Message.Payload.properties)
  return _msg;
}
inline void Message_Payload::set_allocated_properties(::rabbitMQ::BasicProperties* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::rabbitMQ::BasicProperties*>(_impl_.properties_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::rabbitMQ::BasicProperties*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.properties_ = reinterpret_cast<::rabbitMQ::BasicProperties*>(value);
  // @@protoc_insertion_point(field_set_allocated:rabbitMQ.Message.Payload.properties)
}

// string body = 2;
inline void Message_Payload::clear_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.body_.ClearToEmpty();
}
inline const std::string& Message_Payload::body() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rabbitMQ.Message.Payload.body)
  return _internal_body();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message_Payload::set_body(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.body_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rabbitMQ.Message.Payload.body)
}
inline std::string* Message_Payload::mutable_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:rabbitMQ.Message.Payload.body)
  return _s;
}
inline const std::string& Message_Payload::_internal_body() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.body_.Get();
}
inline void Message_Payload::_internal_set_body(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.body_.Set(value, GetArena());
}
inline std::string* Message_Payload::_internal_mutable_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.body_.Mutable( GetArena());
}
inline std::string* Message_Payload::release_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rabbitMQ.Message.Payload.body)
  return _impl_.body_.Release();
}
inline void Message_Payload::set_allocated_body(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.body_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.body_.IsDefault()) {
          _impl_.body_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rabbitMQ.Message.Payload.body)
}

// string valid = 3;
inline void Message_Payload::clear_valid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.valid_.ClearToEmpty();
}
inline const std::string& Message_Payload::valid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rabbitMQ.Message.Payload.valid)
  return _internal_valid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message_Payload::set_valid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.valid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rabbitMQ.Message.Payload.valid)
}
inline std::string* Message_Payload::mutable_valid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_valid();
  // @@protoc_insertion_point(field_mutable:rabbitMQ.Message.Payload.valid)
  return _s;
}
inline const std::string& Message_Payload::_internal_valid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.valid_.Get();
}
inline void Message_Payload::_internal_set_valid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.valid_.Set(value, GetArena());
}
inline std::string* Message_Payload::_internal_mutable_valid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.valid_.Mutable( GetArena());
}
inline std::string* Message_Payload::release_valid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rabbitMQ.Message.Payload.valid)
  return _impl_.valid_.Release();
}
inline void Message_Payload::set_allocated_valid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.valid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.valid_.IsDefault()) {
          _impl_.valid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rabbitMQ.Message.Payload.valid)
}

// -------------------------------------------------------------------

// Message

// .rabbitMQ.Message.Payload payload = 1;
inline bool Message::has_payload() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.payload_ != nullptr);
  return value;
}
inline void Message::clear_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.payload_ != nullptr) _impl_.payload_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::rabbitMQ::Message_Payload& Message::_internal_payload() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::rabbitMQ::Message_Payload* p = _impl_.payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::rabbitMQ::Message_Payload&>(::rabbitMQ::_Message_Payload_default_instance_);
}
inline const ::rabbitMQ::Message_Payload& Message::payload() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rabbitMQ.Message.payload)
  return _internal_payload();
}
inline void Message::unsafe_arena_set_allocated_payload(::rabbitMQ::Message_Payload* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.payload_);
  }
  _impl_.payload_ = reinterpret_cast<::rabbitMQ::Message_Payload*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rabbitMQ.Message.payload)
}
inline ::rabbitMQ::Message_Payload* Message::release_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::rabbitMQ::Message_Payload* released = _impl_.payload_;
  _impl_.payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::rabbitMQ::Message_Payload* Message::unsafe_arena_release_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:rabbitMQ.Message.payload)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::rabbitMQ::Message_Payload* temp = _impl_.payload_;
  _impl_.payload_ = nullptr;
  return temp;
}
inline ::rabbitMQ::Message_Payload* Message::_internal_mutable_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::rabbitMQ::Message_Payload>(GetArena());
    _impl_.payload_ = reinterpret_cast<::rabbitMQ::Message_Payload*>(p);
  }
  return _impl_.payload_;
}
inline ::rabbitMQ::Message_Payload* Message::mutable_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::rabbitMQ::Message_Payload* _msg = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:rabbitMQ.Message.payload)
  return _msg;
}
inline void Message::set_allocated_payload(::rabbitMQ::Message_Payload* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::rabbitMQ::Message_Payload*>(_impl_.payload_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::rabbitMQ::Message_Payload*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.payload_ = reinterpret_cast<::rabbitMQ::Message_Payload*>(value);
  // @@protoc_insertion_point(field_set_allocated:rabbitMQ.Message.payload)
}

// uint32 offset = 2;
inline void Message::clear_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_ = 0u;
}
inline ::uint32_t Message::offset() const {
  // @@protoc_insertion_point(field_get:rabbitMQ.Message.offset)
  return _internal_offset();
}
inline void Message::set_offset(::uint32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:rabbitMQ.Message.offset)
}
inline ::uint32_t Message::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void Message::_internal_set_offset(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// uint32 length = 3;
inline void Message::clear_length() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.length_ = 0u;
}
inline ::uint32_t Message::length() const {
  // @@protoc_insertion_point(field_get:rabbitMQ.Message.length)
  return _internal_length();
}
inline void Message::set_length(::uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:rabbitMQ.Message.length)
}
inline ::uint32_t Message::_internal_length() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.length_;
}
inline void Message::_internal_set_length(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.length_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace rabbitMQ


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::rabbitMQ::ExchangeType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::rabbitMQ::ExchangeType>() {
  return ::rabbitMQ::ExchangeType_descriptor();
}
template <>
struct is_proto_enum<::rabbitMQ::DeliveryMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::rabbitMQ::DeliveryMode>() {
  return ::rabbitMQ::DeliveryMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_msg_2eproto_2epb_2eh
